// <copyright file="PreOperationcontactUpdate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/14/2018 1:36:41 PM</date>
// <summary>Implements the PreOperationcontactUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Sdk;

namespace FinalDynamicsChallenge.contactsPlugin
{
  public class PreOperationcontactUpdate : PluginBase
  {

    public PreOperationcontactUpdate(string unsecure, string secure)
        : base(typeof(PreOperationcontactUpdate))
    {

      // TODO: Implement your custom configuration handling.
    }
    protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
    {
      Calculations instance = new Calculations();


      if (localContext == null)
      {
        throw new InvalidPluginExecutionException("localContext");
      }

      IPluginExecutionContext context = localContext.PluginExecutionContext;

      if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
      {
        Entity contact = (Entity)context.InputParameters["Target"];
        Entity contactPreImage = (Entity)context.PreEntityImages["contactPreImage"];

        try
        {
          int? investmentPeriod = contact.GetAttributeValue<int?>("di_investmentperiod") ?? contactPreImage.GetAttributeValue<int?>("di_investmentperiod");
          decimal? initialInvestment = contact.GetAttributeValue<decimal?>("di_intialinvesmentfinal") ?? contactPreImage.GetAttributeValue<decimal?>("di_intialinvesmentfinal");
          decimal? interestRate = contact.GetAttributeValue<decimal?>("di_interest_rate") ?? contactPreImage.GetAttributeValue<decimal?>("di_interest_rate");
          decimal? rate = interestRate / 100;

          contact["di_esitimatedreturnfinal"] = instance.CalculateAge(initialInvestment, rate, investmentPeriod);
        }
        catch (Exception ex)
        {
          throw new InvalidPluginExecutionException("An error occured in the plugin:", ex);
        }
      }
    }
  }
}

