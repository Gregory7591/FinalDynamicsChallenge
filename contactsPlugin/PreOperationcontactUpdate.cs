// <copyright file="PreOperationcontactUpdate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/14/2018 1:36:41 PM</date>
// <summary>Implements the PreOperationcontactUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Sdk;

namespace FinalDynamicsChallenge.contactsPlugin
{

  /// <summary>
  /// PreOperationcontactUpdate Plugin.
  /// </summary>    
  public class PreOperationcontactUpdate : PluginBase
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="PreOperationcontactUpdate"/> class.
    /// </summary>
    /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
    /// <param name="secure">Contains non-public (secured) configuration information. 
    /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
    /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
    public PreOperationcontactUpdate(string unsecure, string secure)
        : base(typeof(PreOperationcontactUpdate))
    {

      // TODO: Implement your custom configuration handling.
    }


    /// <summary>
    /// Main entry point for he business logic that the plug-in is to execute.
    /// </summary>
    /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
    /// <see cref="IPluginExecutionContext"/>,
    /// <see cref="IOrganizationService"/>
    /// and <see cref="ITracingService"/>
    /// </param>
    /// <remarks>
    /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
    /// The plug-in's Execute method should be written to be stateless as the constructor
    /// is not called for every invocation of the plug-in. Also, multiple system threads
    /// could execute the plug-in at the same time. All per invocation state information
    /// is stored in the context. This means that you should not use global variables in plug-ins.
    /// </remarks>
    protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
    {
      if (localContext == null)
      {
        throw new InvalidPluginExecutionException("localContext");
      }

      ITracingService tracingService = localContext.TracingService;
      IPluginExecutionContext context = localContext.PluginExecutionContext;
      IOrganizationService service = localContext.OrganizationService;

      if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
      {
        Entity contact = (Entity)context.InputParameters["Target"];
        Entity contactPreImage = (Entity)context.PreEntityImages["contactPreImage"];

        try
        {
          int? investmentPeriod = contact.GetAttributeValue<int?>("di_investmentperiod") ?? contactPreImage.GetAttributeValue<int?>("di_investmentperiod");
          decimal? initialInvestment = contact.GetAttributeValue<decimal?>("di_intialinvesmentfinal") ?? contactPreImage.GetAttributeValue<decimal?>("di_intialinvesmentfinal");
          decimal? interestRate = contact.GetAttributeValue<decimal?>("di_interest_rate") ?? contactPreImage.GetAttributeValue<decimal?>("di_interest_rate");
          decimal? rate = interestRate / 100;

          contact["di_esitimatedreturnfinal"] = initialInvestment * (1 + (rate * investmentPeriod));
        }
        catch (Exception ex)
        {
          throw new InvalidPluginExecutionException("An error occured in the plugin:", ex);
        }
      }
    }
  }
}

