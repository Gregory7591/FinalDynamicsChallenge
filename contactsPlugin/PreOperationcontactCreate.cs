// <copyright file="PreOperationcontactCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/13/2018 12:24:08 PM</date>
// <summary>Implements the PreOperationcontactCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Sdk;

namespace FinalDynamicsChallenge.contactsPlugin
{

  /// <summary>
  /// PreOperationcontactCreate Plugin.
  /// </summary>    
  public class PreOperationcontactCreate : PluginBase
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="PreOperationcontactCreate"/> class.
    /// </summary>
    /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
    /// <param name="secure">Contains non-public (secured) configuration information. 
    /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
    /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
    public PreOperationcontactCreate(string unsecure, string secure)
        : base(typeof(PreOperationcontactCreate))
    {

      // TODO: Implement your custom configuration handling.
    }


    /// <summary>
    /// Main entry point for he business logic that the plug-in is to execute.
    /// </summary>
    /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
    /// <see cref="IPluginExecutionContext"/>,
    /// <see cref="IOrganizationService"/>
    /// and <see cref="ITracingService"/>
    /// </param>
    /// <remarks>
    /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
    /// The plug-in's Execute method should be written to be stateless as the constructor
    /// is not called for every invocation of the plug-in. Also, multiple system threads
    /// could execute the plug-in at the same time. All per invocation state information
    /// is stored in the context. This means that you should not use global variables in plug-ins.
    /// </remarks>
    protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
    {
      if (localContext == null)
      {
        throw new InvalidPluginExecutionException("localContext");
      }

      ITracingService tracingService = localContext.TracingService;
      IPluginExecutionContext context = localContext.PluginExecutionContext;

      if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
      {
        Entity contact = (Entity)context.InputParameters["Target"]; // creating entity
        if (contact.LogicalName != "contact" && context.MessageName != "Create") // This confirms that this is an contact type
        {
          return;
        }
        else
        {
          try
          {
            // work out the age of client

            tracingService.Trace("Contact Plugin: Working out age of contact");

            DateTime dateCurrent = DateTime.Now.Date;
            DateTime dateBirth = contact.GetAttributeValue<DateTime>("birthdate");

            int dateDiff = dateCurrent.Month - dateBirth.Month;

            if (dateDiff > -1)
            {
              contact["di_age"] = dateCurrent.Year - dateBirth.Year;

            }
            else
              contact["di_age"] = dateCurrent.Year - dateBirth.Year - 1;

            tracingService.Trace("Contact Plugin: Age of contact worked out");


            contact["di_joining_date"] = DateTime.Now.Date;

            tracingService.Trace("Contact Plugin: Working out maturity date");

            //work out the maturity date assming joining date is the date account created
            contact["di_maturity_date"] = DateTime.Now.Date.AddMonths((int)(contact["di_investmentperiod"]));

            tracingService.Trace("Contact Plugin: Maturity date worked out");
            decimal p = contact.GetAttributeValue<decimal>("di_intialinvesmentfinal");

            decimal r = contact.GetAttributeValue<decimal>("di_interest_rate") / 100;

            decimal t = (decimal)contact.GetAttributeValue<int>("di_investmentperiod");
            contact["di_esitimatedreturnfinal"] = p * (1 + (r * t));
          }
          catch (Exception ex)
          {
            throw new InvalidPluginExecutionException("the wrong msg", ex);
          }
        }
      }
    }
  }
}
