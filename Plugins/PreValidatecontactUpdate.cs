// <copyright file="PreValidatecontactUpdate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/7/2018 12:11:40 PM</date>
// <summary>Implements the PreValidatecontactUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace FinalDynamicsChallenge.Plugins
{

  /// <summary>
  /// PreValidatecontactUpdate Plugin.
  /// </summary>    
  public class PreValidatecontactUpdate :IPlugin
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="PreValidatecontactUpdate"/> class.
    /// </summary>
    /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
    /// <param name="secure">Contains non-public (secured) configuration information. 
    /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
    /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
    
    public new void Execute(IServiceProvider serviceProvider)
    {
      ITracingService tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

      //IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));



      //need to trigger our plugin when an event is executed
      IPluginExecutionContext context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

      if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
      {
        Entity contact = (Entity)context.InputParameters["Target"];
        if (contact.LogicalName == "contact")
        {

          IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
          IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

          try
          {
            // contact["di_age"] = DateTime.Now.Date - (DateTime)contact["birthdate"]; // work out the age of client
            contact["di_age"] = 52;

            service.Update(contact);
            contact["di_maturity_date"] = DateTime.Now.Date.AddMonths((int)(contact["di_investmentperiod"]));//work out the maturity date assming joining date is the date account created

            contact["di_estimated_return"] = (int)contact["di_intial_investment"] * (1 + (double)contact["di_investmentperiod"] * (double)contact["di_interest_rate"]);


            //di_estimated_return
            //di_interest_rate
            //di_intial_investment
            //di_investmentperiod
            //di_joining_date
            //di_maturity_date


          }

          catch (FaultException<OrganizationServiceFault> ex)
          {
            throw new InvalidPluginExecutionException("An error occurred in MyPlug-in.", ex);
          }
          catch (Exception ex)
          {
            tracingService.Trace("MyPlugin: {0}", ex.ToString());
            throw;
          }


        }
      }





    }





    /// <summary>
    /// Main entry point for he business logic that the plug-in is to execute.
    /// </summary>
    /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
    /// <see cref="IPluginExecutionContext"/>,
    /// <see cref="IOrganizationService"/>
    /// and <see cref="ITracingService"/>
    /// </param>
    /// <remarks>
    /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
    /// The plug-in's Execute method should be written to be stateless as the constructor
    /// is not called for every invocation of the plug-in. Also, multiple system threads
    /// could execute the plug-in at the same time. All per invocation state information
    /// is stored in the context. This means that you should not use global variables in plug-ins.
    /// </remarks>
    
  }
}

